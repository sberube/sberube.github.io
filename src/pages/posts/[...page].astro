---
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import Main from "@/layouts/Main.astro";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Card from "@/components/Card.astro";
import Pagination from "@/components/Pagination.astro";
import { render } from "astro:content";
import getSortedPosts from "@/utils/getSortedPosts";
import { SITE } from "@/config";
import getPostsByGroupCondition from "@/utils/getPostsByGroupCondition";

export const getStaticPaths = (async ({ paginate }) => {
  const posts = await getCollection("blog", ({ data }) => !data.draft);
  return paginate(getSortedPosts(posts), { pageSize: SITE.postPerPage });
}) satisfies GetStaticPaths;

const months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

const { page } = Astro.props;
---

<Layout title={`Posts | ${SITE.title}`}>
  <Header />
  <Main pageTitle="Posts" pageDesc="All the articles I've posted.">
  {
    Object.entries(
      getPostsByGroupCondition(page.data, post =>
        post.data.pubDatetime.getFullYear()
      )
    )
      .sort(([yearA], [yearB]) => Number(yearB) - Number(yearA))
      .map(([year, yearGroup]) => (
        <div>
          <span class="text-2xl font-bold">{year}</span>
          <sup class="text-sm">{yearGroup.length}</sup>
          {Object.entries(
            getPostsByGroupCondition(
              yearGroup,
              post => post.data.pubDatetime.getMonth() + 1
            )
          )
            .sort(([monthA], [monthB]) => Number(monthB) - Number(monthA))
            .map(([month, monthGroup]) => (
              <div class="flex flex-col sm:flex-row">
                <div class="mt-6 min-w-36 text-lg sm:my-6">
                  <span class="font-bold">{months[Number(month) - 1]}</span>
                  <sup class="text-xs">{monthGroup.length}</sup>
                </div>
                <ul>
                  {monthGroup
                    .sort(
                      (a, b) =>
                        Math.floor(
                          new Date(b.data.pubDatetime).getTime() / 1000
                        ) -
                        Math.floor(
                          new Date(a.data.pubDatetime).getTime() / 1000
                        )
                    )
                    .map(async data => {
                      const { remarkPluginFrontmatter } = await render(data);
                      const displayTags = data.data.tags.slice(0, 2);
                      return <Card {...data} readingMinutes={remarkPluginFrontmatter.minutesRead} displayTags={displayTags} />;
                    })}
                </ul>
              </div>
            ))}
        </div>
      ))
  }
  </Main>

  <Pagination {page} />

  <Footer noMarginTop={page.lastPage > 1} />
</Layout>
